// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace HarneyCounty.Infrastructure.Core.Mappings
{
    using HarneyCounty.Domain.Core.Models;

    public class EmployeePayHrsHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeePayHrsHistory>
    {
        public EmployeePayHrsHistoryConfiguration()
            : this("dbo")
        {
        }

        public EmployeePayHrsHistoryConfiguration(string schema)
        {
            Property(x => x.EmployeeNumber).HasPrecision(5,0);
            Property(x => x.CheckTypeCvd).IsFixedLength().IsUnicode(false);
            Property(x => x.PaySequence).HasPrecision(1,0);
            Property(x => x.PayPeriodEndingDate).IsOptional();
            Property(x => x.Check).IsOptional().HasPrecision(5,0);
            Property(x => x.DirectDepositStatus).IsOptional().IsFixedLength().IsUnicode(false);
            Property(x => x.RegularHrs).IsOptional().HasPrecision(6,2);
            Property(x => x.RegularPay).IsOptional().HasPrecision(7,2);
            Property(x => x.OvertimeHrs).IsOptional().HasPrecision(6,2);
            Property(x => x.OvertimePay).IsOptional().HasPrecision(7,2);
            Property(x => x.SalaryHrs).IsOptional().HasPrecision(6,2);
            Property(x => x.SalaryPay).IsOptional().HasPrecision(7,2);
            Property(x => x.HolidayHrs).IsOptional().HasPrecision(6,2);
            Property(x => x.HolidayPay).IsOptional().HasPrecision(7,2);
            Property(x => x.HolidayHrsBankedUsed).IsOptional().HasPrecision(6,2);
            Property(x => x.HolidayHrsBankedPay).IsOptional().HasPrecision(6,2);
            Property(x => x.FloatingHolidayHrsUsed).IsOptional().HasPrecision(6,2);
            Property(x => x.FloatingHolidayPay).IsOptional().HasPrecision(7,2);
            Property(x => x.VacationHrsUsed).IsOptional().HasPrecision(6,2);
            Property(x => x.VacationHrsAdded).IsOptional().HasPrecision(6,2);
            Property(x => x.VacationHrsUsedPrior).IsOptional().HasPrecision(6,2);
            Property(x => x.VacationHrsUseLseUsed).IsOptional().HasPrecision(6,2);
            Property(x => x.SickHrsUsed).IsOptional().HasPrecision(6,2);
            Property(x => x.SickHrsAdded).IsOptional().HasPrecision(6,2);
            Property(x => x.CompHrsUsed).IsOptional().HasPrecision(6,2);
            Property(x => x.CompHrsAdded).IsOptional().HasPrecision(6,2);
            Property(x => x.SaifHoursWorked).IsOptional().HasPrecision(4,1);
            Property(x => x.WeeksWorked).IsOptional().HasPrecision(2,0);
            Property(x => x.GrossPay).IsOptional().HasPrecision(7,2);
            Property(x => x.GrossSubjWorkersComp).IsOptional().HasPrecision(7,2);
            Property(x => x.GrossSubjSuta).IsOptional().HasPrecision(7,2);
            Property(x => x.NetPayCheck).IsOptional().HasPrecision(7,2);
            Property(x => x.FedTaxPaid).IsOptional().HasPrecision(7,2);
            Property(x => x.StateTaxPaid).IsOptional().HasPrecision(7,2);
            Property(x => x.FicaTaxPaid).IsOptional().HasPrecision(7,2);
            Property(x => x.FicmTaxPaid).IsOptional().HasPrecision(7,2);
            Property(x => x.GrossNotSubjStateFed).IsOptional().HasPrecision(7,2);
            Property(x => x.GrossNoStateFedFica).IsOptional().HasPrecision(7,2);
            Property(x => x.DeferredCompPaid).IsOptional().HasPrecision(7,2);
            Property(x => x.FringeGross).IsOptional().HasPrecision(7,2);
            Property(x => x.FringeGrossFicaOnly).IsOptional().HasPrecision(7,2);
        }
    }

}
// </auto-generated>
