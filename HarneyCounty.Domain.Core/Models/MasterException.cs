// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace HarneyCounty.Domain.Core.Models
{

    [Table("MasterExceptions", Schema = "dbo")]
    public class MasterException
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"ID", Order = 1, TypeName = "int")]
        [Index(@"PK__MasterEx__3214EC2719DFD96B", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; }

        [Column(@"AsmtYear", Order = 2, TypeName = "decimal")]
        [Required]
        [Display(Name = "Asmt year")]
        public decimal AsmtYear { get; set; }

        [Column(@"AcctNmbr", Order = 3, TypeName = "char")]
        [Required]
        [MaxLength(9)]
        [StringLength(9)]
        [Display(Name = "Acct nmbr")]
        public string AcctNmbr { get; set; }

        [Column(@"TypeException", Order = 4, TypeName = "char")]
        [Required]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Type exception")]
        public string TypeException { get; set; }

        [Column(@"ExceptionSeq", Order = 5, TypeName = "decimal")]
        [Required]
        [Display(Name = "Exception seq")]
        public decimal ExceptionSeq { get; set; }

        [Column(@"ExceptionYear", Order = 6, TypeName = "decimal")]
        [Display(Name = "Exception year")]
        public decimal? ExceptionYear { get; set; }

        [Column(@"ExceptionEntryDate", Order = 7, TypeName = "date")]
        [Display(Name = "Exception entry date")]
        public System.DateTime? ExceptionEntryDate { get; set; }

        [Column(@"ExceptionAmountRmv", Order = 8, TypeName = "numeric")]
        [Display(Name = "Exception amount rmv")]
        public decimal? ExceptionAmountRmv { get; set; }

        [Column(@"ExceptionAmountAv", Order = 9, TypeName = "numeric")]
        [Display(Name = "Exception amount av")]
        public decimal? ExceptionAmountAv { get; set; }

        [Column(@"FlaggingCode", Order = 10, TypeName = "char")]
        [MaxLength(4)]
        [StringLength(4)]
        [Display(Name = "Flagging code")]
        public string FlaggingCode { get; set; }

        [Column(@"ExceptionComment30", Order = 11, TypeName = "char")]
        [MaxLength(30)]
        [StringLength(30)]
        [Display(Name = "Exception comment 30")]
        public string ExceptionComment30 { get; set; }

        [Column(@"AccruedStatus", Order = 12, TypeName = "char")]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Accrued status")]
        public string AccruedStatus { get; set; }

        [Column(@"RolloverStatus", Order = 13, TypeName = "char")]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Rollover status")]
        public string RolloverStatus { get; set; }

        [Column(@"YearRolledOver", Order = 14, TypeName = "decimal")]
        [Display(Name = "Year rolled over")]
        public decimal? YearRolledOver { get; set; }

        [Column(@"ResetStatus", Order = 15, TypeName = "char")]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "Reset status")]
        public string ResetStatus { get; set; }

        [Column(@"NoTrendFlag", Order = 16, TypeName = "char")]
        [MaxLength(1)]
        [StringLength(1)]
        [Display(Name = "No trend flag")]
        public string NoTrendFlag { get; set; }
    }

}
// </auto-generated>
