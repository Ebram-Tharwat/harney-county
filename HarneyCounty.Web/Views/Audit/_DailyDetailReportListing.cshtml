@using HarneyCounty.Application.Core.ViewModel.Audit
@model IEnumerable<DailyDetailReportGroupedByTaxYearViewModel>

@foreach (var group in Model)
{
    <h4 class="italic">Tax Year: <mark>@group.TaxYear</mark></h4>
    decimal previousBalance = 0;
    decimal lastBalance = 0;
    <table class="table table-hover">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().EntryDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().CurrRcpts)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().StatePercentage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().Penalities)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().RefundsNsf)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().NetRcpts)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().C12PercentageInterest)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().C16PercentageInterest)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().Discount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().NetTaxCr)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().LossesToRoll)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().GainsToRoll)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Items.First().BalanceForward)
            </th>
        </tr>
        @{

            foreach (var item in group.Items)
            {
                if (group.Items[0] == item)
                {
                    item.BalanceForward = item.BeginningBalance + (item.GainsToRoll ?? 0) - (item.LossesToRoll ?? 0) - (item.NetRollChg);
                    previousBalance = item.BalanceForward;
                }
                else
                {
                    item.BalanceForward = previousBalance + (item.GainsToRoll ?? 0) - (item.LossesToRoll.HasValue ? item.LossesToRoll.Value : 0) - (item.NetRollChg);
                    previousBalance = item.BalanceForward;
                }
                if (!item.EntryDateTo.HasValue)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.EntryDate)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.CurrRcpts)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.StatePercentage)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.Penalities)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.RefundsNsf)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.NetRcpts)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.C12PercentageInterest)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.C16PercentageInterest)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.Discount)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.NetTaxCr)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.LossesToRoll)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.GainsToRoll)
                        </td>
                        <td>
                            @{

                                @Html.DisplayFor(model => item.BalanceForward)
                            }
                        </td>
                    </tr>
                }
                else
                {
                    if (item.EntryDate >= item.EntryDateFrom && item.EntryDate <= item.EntryDateTo)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.EntryDate)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.CurrRcpts)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.StatePercentage)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.Penalities)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.RefundsNsf)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.NetRcpts)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.C12PercentageInterest)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.C16PercentageInterest)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.Discount)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.NetTaxCr)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.LossesToRoll)
                            </td>
                            <td>
                                @Html.DisplayFor(model => item.GainsToRoll)
                            </td>
                            <td>
                                @{

                                    @Html.DisplayFor(model => item.BalanceForward)
                                    lastBalance = item.BalanceForward;
                                }
                            </td>
                        </tr>
                    }
                }
            }
        }

        @*Total row*@
        @{
            if (!group.Items.All(t => t.EntryDateTo.HasValue))
            {
                        <tr>
                            <td class="bold">Total</td>
                            <td>
                                @group.Items.Sum(t => t.CurrRcpts)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.StatePercentage)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.Penalities)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.RefundsNsf)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.NetRcpts)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.C12PercentageInterest)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.C16PercentageInterest)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.Discount)
                            </td>
                            <td>
                                @group.Items.Sum(t => t.NetTaxCr)
                            </td>
                            <td>
                                @group.Items.Sum(t=>t.LossesToRoll)
                            </td>
                            <td>
                                @group.Items.Sum(t=>t.GainsToRoll)
                            </td>
                            <td>
                                @previousBalance
                            </td>
                        </tr>
            }
            else
            {
                <tr>
                    <td class="bold">Total</td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                        
                    </td>
                    <td>
                       
                    </td>
                    <td>
                    </td>
                    <td>
                        @lastBalance
                    </td>
                </tr>
            }
        }
    </table>
}

@if (Model.Any())
{
    <h4 class="italic bold-">Grand Total:</h4>

    <table class="table table-hover">
        <tr>
            <td class="bold">Total</td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.CurrRcpts))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.StatePercentage))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.Penalities))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.RefundsNsf))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.NetRcpts))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.C12PercentageInterest))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.C16PercentageInterest))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.Discount))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.NetTaxCr))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.LossesToRoll))
            </td>
            <td>
                @Model.Sum(group => group.Items.Sum(item => item.GainsToRoll))
            </td>
            <td>
                @Model.Sum(group => group.Items.LastOrDefault().BalanceForward)
            </td>
        </tr>
    </table>
}