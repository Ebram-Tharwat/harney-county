@model HarneyCounty.Domain.Core.Models.DailyMaster

@using (Html.BeginForm("SaveDailyMaster", "AuditEditDailyTransaction", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-6 col-xs-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.EntryDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DisplayFor(model => model.EntryDate, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.AuditTurnoverSequence.AuditFiscalYear.FiscalYear, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DisplayFor(model => model.AuditTurnoverSequence.AuditFiscalYear.FiscalYear, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBoxFor(model => model.FromDate, new { @Value = Model.FromDate.Value.ToString("yyyy/MM/dd"), @class = "form-control date-picker" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ThruDate, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.TextBoxFor(model => model.ThruDate, new { @Value = Model.ThruDate.Value.ToString("yyyy/MM/dd"), @class = "form-control date-picker" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.FromReceipt, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.FromReceipt, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ThruReceipt, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.ThruReceipt, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-xs-12 no-pad-horizontal">
                <div class="form-group">
                    <span class="control-label col-md-3">
                        <strong> @Html.DisplayName("Checks")</strong>
                    </span>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CheckDollars, new { htmlAttributes = new { @class = "form-control netCashValue" } })
                    </div>
                </div>
                <div class="form-group">
                    <span class="control-label col-md-3">
                        <strong>@Html.DisplayName("Currency")</strong>
                    </span>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CurrencyDollars, new { htmlAttributes = new { @class = "form-control netCashValue" } })
                    </div>
                </div>
                <div class="form-group">
                    <span class="control-label col-md-3">
                        <strong>@Html.DisplayName("Coin")</strong>
                    </span>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CoinDollars, new { htmlAttributes = new { @class = "form-control netCashValue" } })
                    </div>
                </div>
                <div class="form-group">
                    <span class="control-label col-md-3">
                        <strong>@Html.DisplayName("Net Cash")</strong>
                    </span>
                    <div class="col-md-9">
                        <label id="netCashTotal" class="control-label">0</label>
                    </div>
                </div>
                <div class="form-group">
                    <span class="control-label col-md-3">
                        <strong>@Html.DisplayName("Cash Drawer")</strong>
                    </span>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.CashDrawerDollars, new { htmlAttributes = new { @class = "form-control toCashValue" } })
                    </div>
                </div>
                <div class="form-group">
                    <span class="control-label col-md-3">
                        <strong>@Html.DisplayName("T/O Cash")</strong>
                    </span>
                    <div class="col-md-9">
                        <label id="toCashTotal" class="control-label">0</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" formaction="/AuditEditDailyTransaction/SaveDailyMaster" />
            </div>
        </div>
    </div>

}

<script type="text/javascript">
    $(function () {
        // This will make every element with the class "date-picker" into a DatePicker element
        $('.date-picker').datetimepicker({
            format: 'MM/DD/YYYY',
            showTodayButton: true,
            ignoreReadonly: true,
            showClear: true,
            useCurrent: false,
        });

        $('.netCashValue').on('keyup change', function () {
            var netCash = calculateNetCash();
            if (!isNaN(netCash)) {
                $('#netCashTotal').text(netCash.toFixed(2));
                $('.toCashValue').eq(0).change();
            }
        });

        $('.toCashValue').on('keyup change', function () {
            var toCash = calculateTOCash();
            if (!isNaN(toCash)) {
                $('#toCashTotal').text(toCash.toFixed(2));
            }
        });

        $('.netCashValue').eq(0).change();
    })

    function calculateNetCash() {
        var sum = 0;
        $('.netCashValue').each(function () {
            sum += +$(this).val();
        });
        return sum;
    }

    function calculateTOCash() {
        var netCash = calculateNetCash();
        var cashDrawer = $('.toCashValue').val();
        return netCash - cashDrawer;
    }
</script>